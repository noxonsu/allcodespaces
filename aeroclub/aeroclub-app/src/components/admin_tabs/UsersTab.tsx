import React from 'react';
import { API_BASE_URL } from '../../apiConfig';
import { User, ScalingLocation, ColorPalette } from './types'; // –ò–º–ø–æ—Ä—Ç –æ–±—â–∏—Ö —Ç–∏–ø–æ–≤

interface UsersTabProps {
  users: User[];
  scalingLocations: ScalingLocation[];
  fetchUsers: () => Promise<void>;
  onOpenDeleteUserModal: (user: User) => void;
  openSuccessModal: (message: string) => void;
  colors: ColorPalette; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∏–ø ColorPalette
}

const UsersTab: React.FC<UsersTabProps> = ({
  users,
  scalingLocations,
  fetchUsers,
  onOpenDeleteUserModal,
  openSuccessModal,
  colors,
}) => {
  const [newUserLogin, setNewUserLogin] = React.useState("");
  const [newUserPassword, setNewUserPassword] = React.useState("");
  const [newUserLocationId, setNewUserLocationId] = React.useState<string | null>(null);

  const displayUsers = users.map(user => ({
    ...user,
    location: user.location_name || user.location || 'N/A',
  }));

  const handleCreateUser = async () => {
    if (!newUserLogin.trim() || !newUserPassword.trim()) {
      alert("–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.");
      return;
    }
    const token = localStorage.getItem('accessToken');
    if (!token) {
      alert("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.");
      return;
    }
    const userPayload: { login: string; password: string; location_id?: string | null } = {
      login: newUserLogin,
      password: newUserPassword,
    };
    if (newUserLocationId) {
      userPayload.location_id = newUserLocationId;
    }
    try {
      const response = await fetch(`${API_BASE_URL}/api/v1/users/`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify(userPayload),
      });
      if (response.status === 201) {
        openSuccessModal(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${newUserLogin}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.`);
        setNewUserLogin("");
        setNewUserPassword("");
        setNewUserLocationId(null);
        fetchUsers();
      } else {
        const errorData = await response.json();
        alert(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${errorData.detail || response.statusText}`);
      }
    } catch (error) {
      console.error("Error creating user:", error);
      alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    }
  };

  return (
    <div className="content-section users-section">
      <h2 style={{ color: colors.textDark }}>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h2>
      <div className="users-list-container">
        <div className="user-list-header">
          <span className="user-col-login">–õ–æ–≥–∏–Ω</span>
          <span className="user-col-password">–ü–∞—Ä–æ–ª—å</span>
          <span className="user-col-location">–õ–æ–∫–∞—Ü–∏—è</span>
          <span className="user-col-actions">–î–µ–π—Å—Ç–≤–∏—è</span>
        </div>
        {displayUsers.length > 0 ? (
          displayUsers.map(user => (
            <div key={user.id} className="user-list-row">
              <span className="user-col-login">{user.login}</span>
              <span className="user-col-password">{user.password || '******'}</span>
              <span className="user-col-location">{user.location || 'N/A'}</span>
              <div className="user-col-actions user-actions">
                <button className="action-button edit">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                <button className="action-button delete" onClick={() => onOpenDeleteUserModal(user)}>üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
              </div>
            </div>
          ))
        ) : (
          <div className="user-list-row" style={{ textAlign: 'center', color: colors.textLight, padding: '20px' }}>
            –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
          </div>
        )}
      </div>
      <h2 style={{ color: colors.textDark, marginTop: '40px' }}>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h2>
      <div className="form-container create-user-form" style={{ backgroundColor: colors.background }}>
        <div className="form-row">
          <div className="form-group">
            <label style={{ color: colors.textLight }}>–õ–æ–≥–∏–Ω</label>
            <div className="input-wrapper" style={{ backgroundColor: colors.white }}>
              <input type="text" placeholder="–õ–æ–≥–∏–Ω" value={newUserLogin} onChange={(e) => setNewUserLogin(e.target.value)} style={{ color: colors.textDark }} />
            </div>
          </div>
          <div className="form-group">
            <label style={{ color: colors.textLight }}>–ü–∞—Ä–æ–ª—å</label>
            <div className="input-wrapper" style={{ backgroundColor: colors.white }}>
              <input type="password" placeholder="–ü–∞—Ä–æ–ª—å" value={newUserPassword} onChange={(e) => setNewUserPassword(e.target.value)} style={{ color: colors.textDark }} />
            </div>
          </div>
          <div className="form-group">
            <label style={{ color: colors.textLight }}>–õ–æ–∫–∞—Ü–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
            <div className="input-wrapper select-wrapper" style={{ backgroundColor: colors.white }}>
              <select
                value={newUserLocationId || ""}
                onChange={(e) => setNewUserLocationId(e.target.value || null)}
                style={{ color: colors.textDark }}
              >
                <option value="">–ë–µ–∑ –ª–æ–∫–∞—Ü–∏–∏</option>
                {scalingLocations.map(loc => (
                  <option key={loc.id} value={loc.id}>{loc.address}</option>
                ))}
              </select>
            </div>
          </div>
        </div>
        <div className="form-actions">
          <button className="save-button" style={{ backgroundColor: colors.accentRed, color: colors.white }} onClick={handleCreateUser}>–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</button>
        </div>
      </div>
    </div>
  );
};

export default UsersTab;
