import os
import asyncio
import logging
from pathlib import Path
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ .env –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, —á—Ç–æ –∏ –±–æ—Ç
dotenv_path = Path(__file__).parent / '.env'
load_dotenv(dotenv_path=dotenv_path)

TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
SYSTEM_PROMPT = os.getenv('SYSTEM_PROMPT', "–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Figma –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ ---
if not TELEGRAM_BOT_TOKEN:
    logging.critical("–¢–æ–∫–µ–Ω –¥–ª—è Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ.")
    exit()

# --- –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ ---
try:
    from figma_analyzer import fetch_all_data_and_analyze_figma, analyze_figma_data_with_llm
except ImportError as e:
    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å figma_analyzer: {e}. –ü–æ–ø—Ä–æ–±—É–µ–º figmar_lib.analyzer.")
    try:
        from figmar_lib.analyzer import fetch_all_data_and_analyze_figma, analyze_figma_data_with_llm
    except ImportError as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å figmar_lib.analyzer: {e}. –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.")
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            import sys
            sys.path.append(str(Path(__file__).parent))
            from figma_analyzer import fetch_all_data_and_analyze_figma, analyze_figma_data_with_llm
        except ImportError as e:
            logging.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º: {e}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ figma_analyzer.py –¥–æ—Å—Ç—É–ø–µ–Ω.")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
            async def fetch_all_data_and_analyze_figma(url):
                return {
                    'summary': '–ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.',
                    'dataPath': '',
                    'intermediateAnalyses': []
                }
            
            async def analyze_figma_data_with_llm(prompt, image_path):
                return '–ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.'
            
            logging.warning("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –∞–Ω–∞–ª–∏–∑–∞.")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---

@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    await message.reply(SYSTEM_PROMPT)

@dp.message(F.text)
async def handle_text(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ Figma, –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑.
    """
    text = message.text.strip()
    if text.startswith("https://www.figma.com/"):
        await message.reply("–ü–æ–ª—É—á–∏–ª —Å—Å—ã–ª–∫—É –Ω–∞ Figma. –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
        try:
            result = await fetch_all_data_and_analyze_figma(text)
            summary = result.get('summary', '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –æ—Ç—á–µ—Ç –ø—É—Å—Ç.')
            data_path = result.get('dataPath', '')
            intermediate_analyses = result.get('intermediateAnalyses', [])
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫–µ—à–∞
            if not intermediate_analyses and data_path:
                data_dir = Path(data_path)
                for analysis_file in data_dir.glob('page_analysis_*.txt'):
                    try:
                        with open(analysis_file, 'r', encoding='utf-8') as f:
                            cached_analysis = f.read().strip()
                        if cached_analysis:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                            node_id = analysis_file.stem.replace('page_analysis_', '').replace('_', ':')
                            page_name = f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {node_id}"
                            
                            intermediate_analyses.append({
                                'page_name': page_name,
                                'node_id': node_id,
                                'analysis': cached_analysis,
                                'image_path': None
                            })
                    except Exception as e:
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ {analysis_file}: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if data_path:
                data_dir = Path(data_path)
                images_dir = data_dir / 'images'
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ–ª–æ–Ω–∫–∞–º - –æ–Ω–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ base_project_dir
                columns_dir = Path(__file__).parent / 'columns_py_opencv_actual_images'
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
                if images_dir.exists():
                    for image_file in images_dir.glob('*.png'):
                        try:
                            await message.answer_photo(
                                photo=types.FSInputFile(str(image_file)),
                                caption=f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {image_file.stem.replace('node_', '').replace('_', ':')}"
                            )
                        except Exception as e:
                            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_file}: {e}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if columns_dir.exists():
                    for node_dir in columns_dir.iterdir():
                        if node_dir.is_dir():
                            column_files = sorted(node_dir.glob('column_*.png'))
                            if column_files:
                                await message.answer(f"üîß –†–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {node_dir.name}:")
                                for column_file in column_files:
                                    try:
                                        await message.answer_photo(
                                            photo=types.FSInputFile(str(column_file)),
                                            caption=f"üì± {column_file.stem.replace('_', ' ').title()}"
                                        )
                                    except Exception as e:
                                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É {column_file}: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã —Å—Ç—Ä–∞–Ω–∏—Ü
            if intermediate_analyses:
                await message.answer("üìä –ê–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü:")
                for analysis_data in intermediate_analyses:
                    page_name = analysis_data.get('page_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞')
                    analysis_text = analysis_data.get('analysis', '')
                    
                    if analysis_text:
                        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫ –∞–Ω–∞–ª–∏–∑—É
                        full_analysis = f"üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã '{page_name}':\n\n{analysis_text}"
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ —á–∞—Å—Ç—è–º–∏, –µ—Å–ª–∏ –æ–Ω –¥–ª–∏–Ω–Ω—ã–π
                        if len(full_analysis) > 4096:
                            for i in range(0, len(full_analysis), 4096):
                                await message.answer(full_analysis[i:i+4096])
                        else:
                            await message.answer(full_analysis)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            await message.answer("üìã –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑:")
            if len(summary) > 4096:
                for i in range(0, len(summary), 4096):
                    await message.answer(summary[i:i+4096])
            else:
                await message.answer(summary)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ Figma URL: {e}")
            await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
    else:
        await message.reply("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∞ Figma. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.")

@dp.message(F.photo)
async def handle_photo(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    """
    await message.reply("–ü–æ–ª—É—á–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    temp_dir = Path(__file__).parent / "temp_images"
    temp_dir.mkdir(exist_ok=True)
    
    photo_path = temp_dir / f"{message.photo[-1].file_id}.jpg"
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await bot.download(message.photo[-1], destination=str(photo_path))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        await message.answer_photo(
            photo=types.FSInputFile(str(photo_path)),
            caption="‚úÖ –ü–æ–ª—É—á–∏–ª –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é..."
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        try:
            image_prompt_file = Path(__file__).parent / '.env.image_analyse_prompt'
            if image_prompt_file.exists():
                image_prompt = image_prompt_file.read_text(encoding='utf-8')
            else:
                image_prompt = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. –û–ø–∏—à–∏ —á—Ç–æ –≤–∏–¥–∏—à—å: —ç–ª–µ–º–µ–Ω—Ç—ã UI, —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É, —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫—É, –æ–±—â–∏–π —Å—Ç–∏–ª—å –¥–∏–∑–∞–π–Ω–∞."
                logging.warning(f"–§–∞–π–ª –ø—Ä–æ–º–ø—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_prompt_file}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç.")
        except Exception as e:
            image_prompt = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. –û–ø–∏—à–∏ —á—Ç–æ –≤–∏–¥–∏—à—å: —ç–ª–µ–º–µ–Ω—Ç—ã UI, —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É, —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫—É, –æ–±—â–∏–π —Å—Ç–∏–ª—å –¥–∏–∑–∞–π–Ω–∞."
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–º–ø—Ç–∞: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç.")
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        analysis_result = await analyze_figma_data_with_llm(image_prompt, str(photo_path))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if len(analysis_result) > 4096:
            for i in range(0, len(analysis_result), 4096):
                await message.answer(analysis_result[i:i+4096])
        else:
            await message.answer(analysis_result)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if photo_path.exists():
            photo_path.unlink()


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---
async def main():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞.
    """
    logging.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
