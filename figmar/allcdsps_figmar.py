import os
import asyncio
import logging
from pathlib import Path
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.enums import ParseMode
import sys # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path –¥–ª—è –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(str(Path(__file__).parent.parent))

# –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç –∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
from figmar.figmar_lib.utils import escape_markdown, format_analysis_markdown, split_long_message, send_image_safely, send_formatted_message

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ .env –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, —á—Ç–æ –∏ –±–æ—Ç
dotenv_path = Path(__file__).parent / '.env'
load_dotenv(dotenv_path=dotenv_path)

TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
SYSTEM_PROMPT = os.getenv('SYSTEM_PROMPT', "–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Figma –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ ---
if not TELEGRAM_BOT_TOKEN:
    logging.critical("–¢–æ–∫–µ–Ω –¥–ª—è Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ.")
    exit()

# --- –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ ---
try:
    from figmar.figmar_lib.analyzer import fetch_all_data_and_analyze_figma, analyze_figma_data_with_llm
except ImportError as e:
    logging.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {e}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ figmar/figmar_lib/analyzer.py –¥–æ—Å—Ç—É–ø–µ–Ω.")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    async def fetch_all_data_and_analyze_figma(url): # –£–¥–∞–ª—è–µ–º message –∏–∑ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã
        return {
            'summary': '–ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.',
            'dataPath': '',
            'intermediateAnalyses': []
        }
    
    async def analyze_figma_data_with_llm(prompt, image_path):
        return '–ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.'
    
    logging.warning("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –∞–Ω–∞–ª–∏–∑–∞.")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---

@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    welcome_text = f"*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Figma Analyzer Bot\\!*\n\n{escape_markdown(SYSTEM_PROMPT)}"
    try:
        await message.reply(welcome_text, parse_mode=ParseMode.MARKDOWN_V2)
    except Exception:
        await message.reply(SYSTEM_PROMPT)

@dp.message(F.text)
async def handle_text(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ Figma, –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑.
    """
    text = message.text.strip()
    if text.startswith("https://www.figma.com/"):
        status_text = "üîÑ *–ü–æ–ª—É—á–∏–ª —Å—Å—ã–ª–∫—É –Ω–∞ Figma\\!*\n\n–ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç\\.\\.\\."
        try:
            await message.reply(status_text, parse_mode=ParseMode.MARKDOWN_V2)
        except Exception:
            await message.reply("–ü–æ–ª—É—á–∏–ª —Å—Å—ã–ª–∫—É –Ω–∞ Figma. –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
        
        try:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            progress_text = "üì• *–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ Figma\\.\\.\\.*"
            try:
                await message.answer(progress_text, parse_mode=ParseMode.MARKDOWN_V2)
            except Exception:
                await message.answer("üì• –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ Figma...")
            
            # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç message –≤ —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
            result = await fetch_all_data_and_analyze_figma(text) # –£–¥–∞–ª—è–µ–º message –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
            loading_complete_text = "‚úÖ *–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã\\!* –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\\.\\.\\."
            try:
                await message.answer(loading_complete_text, parse_mode=ParseMode.MARKDOWN_V2)
            except Exception:
                await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
            
            summary = result.get('summary', '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –æ—Ç—á–µ—Ç –ø—É—Å—Ç.')
            data_path = result.get('dataPath', '')
            intermediate_analyses = result.get('intermediateAnalyses', [])
            node_images_paths = result.get('nodeImagesPaths', {}) # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º —Å—Ç—Ä–∞–Ω–∏—Ü

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
            images_sent = 0
            if node_images_paths:
                header_text = "üìÑ *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü:*"
                try:
                    await message.answer(header_text, parse_mode=ParseMode.MARKDOWN_V2)
                except Exception:
                    await message.answer("üìÑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü:")
                
                for node_id, local_image_path in node_images_paths.items():
                    if local_image_path:
                        page_name = node_id.replace(':', '_') # –ò—Å–ø–æ–ª—å–∑—É–µ–º node_id –∫–∞–∫ –∏–º—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                        caption = f"üìÑ *–°—Ç—Ä–∞–Ω–∏—Ü–∞:* `{escape_markdown(page_name)}`"
                        if await send_image_safely(message, local_image_path, caption):
                            images_sent += 1
                        else:
                            fallback_text = f"üìÑ *–°—Ç—Ä–∞–Ω–∏—Ü–∞:* `{escape_markdown(page_name)}` _(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)_"
                            try:
                                await message.answer(fallback_text, parse_mode=ParseMode.MARKDOWN_V2)
                            except Exception:
                                await message.answer(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page_name} (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)")
                        await asyncio.sleep(0.5) # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã —Å—Ç—Ä–∞–Ω–∏—Ü
            if intermediate_analyses:
                header_text = "üìä *–ê–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü:*"
                try:
                    await message.answer(header_text, parse_mode=ParseMode.MARKDOWN_V2)
                except Exception:
                    await message.answer("üìä –ê–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü:")
                
                for i, analysis_data in enumerate(intermediate_analyses):
                    page_name = analysis_data.get('page_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞')
                    analysis_text = analysis_data.get('analysis', '')
                    image_path_col = analysis_data.get('image_path_col', None) # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∫–æ–ª–æ–Ω–∫–∏

                    if image_path_col and Path(image_path_col).exists():
                        caption_col = f"üì± *–ö–æ–ª–æ–Ω–∫–∞:* `{escape_markdown(Path(image_path_col).stem.replace('_', ' ').title())}`"
                        await send_image_safely(message, image_path_col, caption_col)
                        await asyncio.sleep(0.5) # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞

                    if analysis_text:
                        await send_formatted_message(
                            message, 
                            analysis_text, 
                            f"üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã '{page_name}'"
                        )
                        await asyncio.sleep(0.5) # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –≤ –∫–æ–Ω—Ü–µ
            await send_formatted_message(message, summary, "üìã –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats_text = f"‚úÖ *–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω\\!*\n\nüìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_sent}\nüìÑ –ê–Ω–∞–ª–∏–∑–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü: {len(intermediate_analyses)}"
            try:
                await message.answer(stats_text, parse_mode=ParseMode.MARKDOWN_V2)
            except Exception:
                await message.answer(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_sent}, –∞–Ω–∞–ª–∏–∑–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü: {len(intermediate_analyses)}")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ Figma URL: {e}")
            # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            error_text = f"‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:*\n\n`{escape_markdown(str(e))}`\n\n_–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\\._"
            try:
                await message.reply(error_text, parse_mode=ParseMode.MARKDOWN_V2)
            except Exception:
                await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    else:
        error_text = "‚ùå *–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∞ Figma\\.*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É\\."
        try:
            await message.reply(error_text, parse_mode=ParseMode.MARKDOWN_V2)
        except Exception:
            await message.reply("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∞ Figma. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.")

@dp.message(F.photo)
async def handle_photo(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    """
    status_text = "üì∑ *–ü–æ–ª—É—á–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\\!*\n\n–ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑\\.\\.\\."
    try:
        await message.reply(status_text, parse_mode=ParseMode.MARKDOWN_V2)
    except Exception:
        await message.reply("–ü–æ–ª—É—á–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    temp_dir = Path(__file__).parent / "temp_images"
    temp_dir.mkdir(exist_ok=True)
    
    photo_path = temp_dir / f"{message.photo[-1].file_id}.jpg"
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        download_text = "‚¨áÔ∏è *–°–∫–∞—á–∏–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\\.\\.\\.*"
        try:
            await message.answer(download_text, parse_mode=ParseMode.MARKDOWN_V2)
        except Exception:
            await message.answer("‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
            
        await bot.download(message.photo[-1], destination=str(photo_path))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        confirmation_text = "‚úÖ *–ü–æ–ª—É—á–∏–ª –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\\.*\n\n–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é\\.\\.\\."
        if await send_image_safely(message, photo_path, confirmation_text):
            pass  # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º
            try:
                await message.answer(confirmation_text, parse_mode=ParseMode.MARKDOWN_V2)
            except Exception:
                await message.answer("‚úÖ –ü–æ–ª—É—á–∏–ª –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        analyze_text = "üîç *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\\.\\.\\.*"
        try:
            await message.answer(analyze_text, parse_mode=ParseMode.MARKDOWN_V2)
        except Exception:
            await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
            
        try:
            image_prompt_file = Path(__file__).parent / '.env.image_analyse_prompt'
            if image_prompt_file.exists():
                image_prompt = image_prompt_file.read_text(encoding='utf-8')
            else:
                image_prompt = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. –û–ø–∏—à–∏ —á—Ç–æ –≤–∏–¥–∏—à—å: —ç–ª–µ–º–µ–Ω—Ç—ã UI, —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É, —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫—É, –æ–±—â–∏–π —Å—Ç–∏–ª—å –¥–∏–∑–∞–π–Ω–∞."
                logging.warning(f"–§–∞–π–ª –ø—Ä–æ–º–ø—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_prompt_file}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç.")
        except Exception as e:
            image_prompt = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. –û–ø–∏—à–∏ —á—Ç–æ –≤–∏–¥–∏—à—å: —ç–ª–µ–º–µ–Ω—Ç—ã UI, —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É, —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫—É, –æ–±—â–∏–π —Å—Ç–∏–ª—å –¥–∏–∑–∞–π–Ω–∞."
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–º–ø—Ç–∞: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç.")
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        analysis_result = await analyze_figma_data_with_llm(image_prompt, str(photo_path))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await send_formatted_message(message, analysis_result, "üñºÔ∏è –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        complete_text = "‚úÖ *–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω\\!*"
        try:
            await message.answer(complete_text, parse_mode=ParseMode.MARKDOWN_V2)
        except Exception:
            await message.answer("‚úÖ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω!")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_text = f"‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:*\n\n`{escape_markdown(str(e))}`\n\n_–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\\._"
        try:
            await message.reply(error_text, parse_mode=ParseMode.MARKDOWN_V2)
        except Exception:
            await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if photo_path.exists():
            photo_path.unlink()


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---
async def main():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞.
    """
    logging.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
