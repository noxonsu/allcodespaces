const Parser = require('rss-parser');
const axios = require('axios');
const cheerio = require('cheerio');
const TelegramBot = require('node-telegram-bot-api');
const dotenv = require('dotenv');
const fs = require('fs').promises;

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ nameprompt –∏ –∑–∞–≥—Ä—É–∑–∫–∞ .env —Ñ–∞–π–ª–∞
const nameprompt = 'flru';
const envPath = `.env.${nameprompt}`;
const result = dotenv.config({ path: envPath });

const { setSystemMessage, callOpenAI } = require('./openai');

if (result.error) {
  console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ${envPath}:`, result.error.message);
  process.exit(1);
}

const openaiApiKey = process.env.OPENAI_API_KEY;
if (!openaiApiKey) {
  console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª—é—á API –∏–∑ —Ñ–∞–π–ª–∞ ${envPath}`);
  process.exit(1);
}

const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN;
if (!telegramBotToken) {
  console.error('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
  process.exit(1);
}
const bot = new TelegramBot(telegramBotToken, { polling: false });

const parser = new Parser();
const rssUrl = 'https://www.fl.ru/rss/all.xml';
const chatId = 1; // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π chatId –¥–ª—è OpenAI
const logFile = 'processed_projects.json';

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
const systemPrompt = `
–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞. –¢—ã —á–∏—Ç–∞–µ—à—å –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –ø—ã—Ç–∞–µ—à—å—Å—è –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∏—Ö. –ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –∏ —Å–∫–∞–∂–∏ ‚Äî –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –æ–Ω –¥–ª—è –Ω–∞—Å (–º–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –Ω–∏–∂–µ, –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏)? –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ–ø—É—Å–∫–∞–π –ø—Ä–æ–µ–∫—Ç. –ï—Å–ª–∏ —Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—à—å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–µ–∫—Ç, —Ç–æ –∫—Ä–∞—Ç–∫–æ —Å–∫–∞–∂–∏ –ø–æ—á–µ–º—É. –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, —Ç–æ –Ω–∞–ø–∏—à–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å." –∏ –æ–±—ä—è—Å–Ω–∏ –ø–æ—á–µ–º—É. –ù–µ –ø–∏—à–∏ –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ. –¢–∞–∫ –∂–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–æ–≤ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º. –¢–∞–∫ –∂–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ä–∞–±–æ—Ç–∞ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏ (–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è). –ü—Ä–æ–ø—É—Å–∫–∞–π 1—Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ. –í—Å–µ —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π –∏ –±–ª–æ–∫—á–µ–π–Ω–æ–º –ø–æ–¥—Ö–æ–¥–∏—Ç. –ß–µ–º —Å—Ç–∞—Ä—à–µ –∞–∫–∫–∞—É–Ω—Ç —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è —Ç–µ–º –ª—É—á—à–µ. –ï—Å–ª–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ figma —Ç–æ —ç—Ç–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–π –µ—Å–ª–∏ –∏—â—É—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∏–∫–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–π –µ—Å–ª–∏ –±—é–∂–µ—Ç –º–µ–Ω—å—à–µ 10000—Ä (–Ω–æ –µ—Å–ª–∏ –±—é–¥–∂–µ—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–æ —ç—Ç–æ –æ–∫ –¥–ª—è –Ω–∞—Å). –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤–æ–≤–∞—Ç—å –æ–¥–Ω–æ–π –∏–∑ –º–æ–∏—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π —á—Ç–æ–± –ø—Ä–æ–µ–∫—Ç –ø–æ–¥—Ö–æ–¥–∏–ª –Ω–∞–º.  

–ú–æ–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏:
hire a web developer, [11.06.2025 11:03]
Hi! I offer web development (full stack - react js , python, php etc...) services: CRM integrations, AI, Telegram, any API, and dashboards - faster than anyone. My goal: 100 outsourcing projects by year-end. Contact @sashanoxon to solve your task‚Äîfirst demo in 24 hours!

My Rates: 1 hour ~ 40$ 

Check out case studies of similar complexity in my channel. Message @sashanoxon to discuss your project. Have a mockup? Send it to @sashanoxonbot for auto-evaluation (Figma link or layout image).

hire a web developer, [11.06.2025 11:03]
Earlier works (without neural networks):

- GitHub: https://github.com/noxonsu - 108 repositories, including MultiCurrencyWallet (Bitcoin, Ethereum, ERC20 wallets with atomic swap exchange) and other blockchain projects.
- Onout: https://onout.org/ - No-code web3 solutions, deploy blockchain apps (DEX, wallets) on custom domains. Features Telegram GPT integration, WordPress plugins, and auto-deployment via Cloudflare Pages.

hire a web developer, [11.06.2025 11:04]
1. üîÑ DEX (UNI FACTORY)
   - Create your DEX based on Uniswap V2.
   - Commission: 0.00% to 20%.
   - Price: 0-$899
   - Editable: Colors, logo, menus, fees, tokenlist.
   - Details: https://onout.org/dex/
   - Preview: https://definance.wpmix.net/

2. üé∞ Lottery
   - Blockchain-based lottery; earn 0-30% commission.
   - Supported Blockchains: ETH, BSC, Polygon.
   - Supported tokens: ERC20 (BEP20).
   - Admin Controls: Start/Finish lottery, set fees.
   - Details: https://onout.org/lottery/
   - Preview: https://lottery.onout.org/

3. ü™ô Wallet
   - Create a multicurrency crypto wallet.
   - Price: $999
   - Supported cryptocurrencies: Bitcoin, Ethereum, tokens.
   - Features: P2P exchange via atomic swaps, customize tokens, set commissions, Visa/MC integration.
   - Editable: Logo, colors, assets list, banners.
   - Details: https://onout.org/wallet/
   - Preview: https://wallet.wpmix.net/

4. üåæ Farming
   - Create ERC20 Staking & Yield Farming.
   - Price: $799
   - Attract investment by offering rewards.
   - Use any ERC20 tokens, including Uniswap lp.
   - Set staking and reward tokens in the admin panel.
   - Simple Interface & Settings.
   - Details: https://onout.org/farming/
   - Preview: https://farm.wpmix.net/

5. üó≥ DAO
   - Governance and proposals for your crypto token.
   - Price: $600
   - Stakeholders can create/vote for proposals without spending on gas.
   - Supported: Metamask, ERC20, BEP20, other EVM blockchains.
   - Features: Metamask integration, create/vote on proposals, list of votes, set voting period.
   - Based on snapshot.org API.
   - Details: https://onout.org/dao/
   - Preview: https://farm.wpmix.net/daofactory/

6. üåâ CrossChain
   - Create an EVM compatible blockchain bridge.
   - Price: $1500 
   - Based on multichain.org's open sources.
   - Admin Abilities: Custom design (logo, colors, social links), set up tokens and swap configurations.
   - Reliability: Uses multichain.org open sources with verifiable changes; developed by the MCW wallet team.
   - Connectivity: All EVM blockchains can be supported.
   - Details: https://onout.org/crosschain/
   - Preview: https://crosschain.onout.org/

7. üöÄ IDOFactory - Launchpad
   - Purpose: Launchpad solution for IDO pools and token locking.
   - Price: $950
   - Feature: Use your token for IDO pools or native coins like ETH, BNB for token lockers.
   - Editable: Logo, title, social links, services' fees, admin and fee addresses.
   - Note: Admin does not have access to the smart contracts, and the software should be used at one's own risk.
   - Details: https://onout.org/launchpad/
   - Preview: https://launchpad.onout.org/

https://t.me/onoutsupportbot - Talk to team!!!!

hire a web developer, [11.06.2025 11:04]
Task: Cold sales via neuro-commenting.

Solution: System parses crypto projects from blockchain, finds websites via Google (serpapi.com), analyzes content, and locates Telegram chats. Data is stored in Google Sheets. A human joins groups (anti-spam, no automation possible), and a script sends personalized commercial offers, saving message links.

Result: Processed thousands of projects, sent offers. ROI was zero (targeted a dying market), but the case is scalable to any industry.

Why? Automates cold sales for your business. Your parsing sources and channels (e.g., email) may differ, but the flow remains: search, analyze, generate offer, send.

Contact: @sashanoxon

hire a web developer, [11.06.2025 11:06]
Task: Gather a female audience for weight loss.

Solution:

Telegram Bot https://t.me/calloriescalculatorbot

A calorie-counting Telegram bot that:

- Asks for daily calorie goals and tracks intake via text, photos (OCR via OpenAI), or voice messages (transcribed).
- Resets daily based on user‚Äôs timezone (determined by city).
- Stores user data (name, city, timezone) in long-term memory.
- Boosts engagement by occasionally prompting to pin the chat or share via referral link (https://t.me/fatnosecretbot/?start=chatId).

Prompt example: Tracks calories, accepts text/photo/voice, resets daily, stores data, encourages sharing after proving value, double-checks calculations.
Result:

Seeded female audience (~0.5$ per user in tests). Users engage, share links, and find the bot via search.

Why?

Custom bots can target any audience, drive engagement, sell, and go viral.

Contact: @sashanoxon

hire a web developer, [11.06.2025 11:07]
Task: Find leads for development projects on Upwork.com.

Solution:

Parser for new project feeds. Each project is analyzed with a prompt:

You‚Äôre a freelancer‚Äôs assistant. You read project descriptions and qualify them. Check if this project seems posted by a large company, agency, or is a B2B system. Skip projects from individuals, small clients, or students. If you recommend pursuing the project, provide a description of what needs to be coded as instructions for a neural network developer. If not, write ‚ÄúNo‚Äù. Keep it concise. We‚Äôre also interested in Telegram bot development and working with neural networks (non-image). Skip 1C programming. Bitrix is acceptable. Skip if they‚Äôre looking for arbitrage specialists. Here‚Äôs the project description: [description].

Selected projects are sent to me via Telegram with a starter prompt for Copilot.

Result:

Generated leads from Upwork.com.

Contact me for any development needs: @sashanoxon

hire a web developer, [11.06.2025 11:07]
Task: Create a bot for internal use in a crypto exchanger to quickly calculate fair rates, perform AML checks, and verify against blocklists via API.

Solution:

A Telegram bot using the /aml command. User inputs an address, and the bot queries a service to return whether the address is safe to use. Supports Bitcoin and Tron, and calculates rates based on the exchanger‚Äôs internal rates.

Contact: @sashanoxon

hire a web developer, [11.06.2025 11:08]
Task: Replace Windows' default Voice-to-Text, which poorly handles mixed Russian/English terms. I built a program triggered by a hotkey, listening to the microphone until speech stops, converting it to Russian or English text, and cleaning it of filler words.

Prompt for audio post-processing:

This is an audio transcription. Remove filler sounds like "uh," "um," and make the text look typed, without parasite words or pauses. Return only the cleaned text, no explanations or prefixes.

If posting to Telegram, include: https://t.me/sashanoxon

Result:

Faster text communication, especially for explaining things to non-technical people without calls. Also useful for interacting with Copilot (the AI I use for code editing), which can‚Äôt process audio yet.

Contact: https://t.me/sashanoxon

hire a web developer, [11.06.2025 11:08]
Task: Create a web-based dashboard for telephony analysis. The client has a virtual PBX (Asterisk) with multiple operators. The dashboard must visually display operations, comply with personal data storage regulations, and run on the client‚Äôs server (market solutions don‚Äôt meet data privacy requirements).

Solution:

Integrated with Asterisk API to export call data.
Implemented speech transcription for call recordings.
Applied semantic analysis via neural networks to identify call purposes.
Built an authentication system (admin configures departments, operator passwords, etc., via Google Sheets).
Tech Stack:

Backend: Node.js for API integration and data processing.
Frontend: React with Tailwind CSS for responsive, modern UI.
Neural Network: Custom model for semantic analysis (non-image).
Database: PostgreSQL (on client‚Äôs server) for call data and user configs.
Authentication: JWT-based, linked to Google Sheets for admin management.
Features:

Real-time call metrics (duration, operator performance, call volume).
Transcribed call logs with searchable semantic tags (e.g., ‚Äúcomplaint,‚Äù ‚Äúsales‚Äù).
Secure data storage on client‚Äôs server.
Role-based access (admin, operator) with Google Sheets-driven config.
Contact: https://t.me/sashanoxon

hire a web developer, [11.06.2025 11:09]
Task: Create a bot to analyze Figma designs, assess complexity (screens, elements, user scenarios, complex components), and estimate implementation effort. For Figma files, it exports structured text data for subsequent development.

Solution:

@sashanoxonbot –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞–∫–µ—Ç—ã Figma —á–µ—Ä–µ–∑ API, —Å—á–∏—Ç–∞–µ—Ç —ç–∫—Ä–∞–Ω—ã/—ç–ª–µ–º–µ–Ω—Ç—ã, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ—Ç–æ–∫–∏ –∏ —Å–ª–æ–∂–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã) –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–µ—Ä–∞—Ä—Ö–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, —Å—Ç–∏–ª–∏) –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.

Result:

–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è. –ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: 5 —á–∞—Å–æ–≤.

Contact: @sashanoxon

—Å–∫–∏–ª—ã: python, nodejs, react, telegram bot, figma api, –Ω–µ–π—Ä–æ—Å–µ—Ç–∏, ai, web development, blockchain, crypto, smart contracts, api integration, full stack development

–ö–û–ù–ï–¶ –ö–û–ú–ü–ï–¢–ï–ù–¶–ò–ô –ò –ü–û–†–¢–§–û–õ–ò–û. 

–í–æ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: 
`;
setSystemMessage(systemPrompt);

const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

// –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
async function loadProcessedProjects() {
  try {
    const data = await fs.readFile(logFile, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    if (error.code === 'ENOENT') {
      return {};
    }
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤:', error.message);
    return {};
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
async function saveProcessedProject(projectUrl) {
  const processed = await loadProcessedProjects();
  processed[projectUrl] = new Date().toISOString();
  try {
    await fs.writeFile(logFile, JSON.stringify(processed, null, 2));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ–≥–∞:', error.message);
  }
}

function extractRegistrationDate(htmlContent) {
  const $ = cheerio.load(htmlContent);
  const registrationText = $('div.mt-8.text-7:contains("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–∞–π—Ç–µ")').text();
  const match = registrationText.match(/–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–∞–π—Ç–µ\s*(.+)/);
  return match ? match[1].trim() : null;
}

async function fetchProjectDetails(projectUrl) {
  try {
    const response = await axios.get(projectUrl);
    const $ = cheerio.load(response.data);
    
    // Updated selector - look for div with class 'text-5' that contains the project description
    // The description is typically in a div with id starting with 'projectp' followed by project ID
    const description = $('div[id^="projectp"]').text().trim() || 
                       $('div.text-5.b-layout__txt_padbot_20').text().trim() ||
                       $('div.text-5').first().text().trim();
    
    // Extract budget information
    let budget = null;
    // Look for budget in different possible locations
    const budgetSelectors = [
      'div.text-4:contains("–ë—é–¥–∂–µ—Ç:") span',
      'div:contains("–ë—é–¥–∂–µ—Ç:") span',
      '.budget',
      '[class*="budget"]'
    ];
    
    for (const selector of budgetSelectors) {
      const budgetElement = $(selector);
      if (budgetElement.length > 0) {
        const budgetText = budgetElement.text().trim();
        if (budgetText && budgetText !== '–ë—é–¥–∂–µ—Ç:') {
          // Clean budget text by removing HTML entities and extra characters
          budget = budgetText
            .replace(/&#8381;/g, '—Ä—É–±')
            .replace(/\s+/g, ' ')
            .trim();
          break;
        }
      }
    }
    
    // Alternative: search for budget in the entire page text
    if (!budget) {
      const pageText = $('body').text();
      const budgetMatch = pageText.match(/–ë—é–¥–∂–µ—Ç:\s*([^\n\r]+)/i);
      if (budgetMatch) {
        budget = budgetMatch[1]
          .replace(/&#8381;/g, '—Ä—É–±')
          .replace(/\s+/g, ' ')
          .trim();
      }
    }
    
    const registrationDate = extractRegistrationDate(response.data);
    return { description: description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', registrationDate, budget };
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞ ${projectUrl}:`, error.message);
    return { description: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è', registrationDate: null, budget: null };
  }
}

async function analyzeProject(projectTitle, projectDescription, registrationDate) {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞
    let isOldEnough = false;
    if (registrationDate) {
      // Handle different registration date formats
      const yearMatch = registrationDate.match(/(\d+)\s*–ª–µ—Ç/);
      const monthMatch = registrationDate.match(/(\d+)\s*–º–µ—Å—è—Ü/);
      const yearAndMonthMatch = registrationDate.match(/(\d+)\s*–≥–æ–¥–∞?\s+–∏\s+(\d+)\s*–º–µ—Å—è—Ü/);
      
      let totalYears = 0;
      
      if (yearAndMonthMatch) {
        // Format: "4 –≥–æ–¥–∞ –∏ 6 –º–µ—Å—è—Ü–µ–≤"
        totalYears = parseInt(yearAndMonthMatch[1]) + (parseInt(yearAndMonthMatch[2]) / 12);
      } else if (yearMatch) {
        // Format: "5 –ª–µ—Ç"
        totalYears = parseInt(yearMatch[1]);
      } else if (monthMatch) {
        // Format: "8 –º–µ—Å—è—Ü–µ–≤"
        totalYears = parseInt(monthMatch[1]) / 12;
      }
      
      if (totalYears >= 1) {
        isOldEnough = true;
      }
    }

    // –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —Å–ª–∏—à–∫–æ–º –Ω–æ–≤—ã–π - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ë–ï–ó –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ OpenAI
    if (!isOldEnough) {
      console.log(`–ó–∞–∫–∞–∑—á–∏–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –º–µ–Ω–µ–µ 1 –≥–æ–¥–∞ (${registrationDate}). –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–µ–∫—Ç.`);
      return '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å. –ó–∞–∫–∞–∑—á–∏–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –º–µ–Ω–µ–µ 1 –≥–æ–¥–∞ –Ω–∞–∑–∞–¥.';
    }

    // –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —Å—Ç–∞—Ä—ã–π - –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ OpenAI (—Ç—Ä–∞—Ç–∏–º –¥–µ–Ω—å–≥–∏)
    const userMessageContent = [
      {
        type: 'input_text',
        text: `–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: ${projectTitle}\n –û–ø–∏—Å–∞–Ω–∏–µ: ${projectDescription}\n –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞: ${registrationDate}`,
      },
    ];

    let retries = 3;
    while (retries > 0) {
      try {
        // Use a unique chat ID for each request to avoid sending history
        const uniqueChatId = Math.floor(Date.now() / 1000) + Math.floor(Math.random() * 1000);
        const analysis = await callOpenAI(uniqueChatId, userMessageContent);
        if (!analysis || analysis.trim().toLowerCase().includes('–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å')) {
          return analysis || '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å. –ü—Ä–æ–µ–∫—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º.';
        }
        return analysis;
      } catch (error) {
        retries--;
        if (retries === 0) {
          throw error;
        }
        await sleep(1000);
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ–µ–∫—Ç–∞:', error.message);
    if (error instanceof SyntaxError && error.message.includes('JSON')) {
      console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞...');
      return '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å. –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞.';
    }
    return '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞';
  }
}

async function processFeed() {
  try {
    const feed = await parser.parseURL(rssUrl);
    console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${feed.items.length} –ø—Ä–æ–µ–∫—Ç–æ–≤`);

    const processedProjects = await loadProcessedProjects();
    const delay = 4000;

    for (const item of feed.items) {
      let projectTitle = item.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
      const projectUrl = item.link;

      if (processedProjects[projectUrl]) {
        console.log(`–ü—Ä–æ–µ–∫—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${projectTitle}`);
        continue;
      }

      console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: ${projectTitle}`);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ RSS, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
      const description = item.contentSnippet || item.description || '–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑ RSS';
      const registrationDate = null; // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –∏–∑-–∑–∞ 403 –æ—à–∏–±–æ–∫
      const budget = null; // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –∏–∑-–∑–∞ 403 –æ—à–∏–±–æ–∫
      
      // –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ:
      // const { description, registrationDate, budget } = await fetchProjectDetails(projectUrl);
      
      // Add budget to title if not already present and budget exists
      if (budget && !projectTitle.toLowerCase().includes('–±—é–¥–∂–µ—Ç') && !projectTitle.includes('‚ÇΩ') && !projectTitle.includes('—Ä—É–±')) {
        projectTitle = `${projectTitle} (–ë—é–¥–∂–µ—Ç: ${budget})`;
      }
      
      // Add account age and budget to project description
      let projectDescription = description;
      
      if (registrationDate) {
        projectDescription += `\n\n–í–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞: ${registrationDate}`;
      }
      
      if (budget && !description.toLowerCase().includes('–±—é–¥–∂–µ—Ç')) {
        projectDescription += `\n\n–ë—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞: ${budget}`;
      }

      const analysis = await analyzeProject(projectTitle, projectDescription, registrationDate);

      console.log(`–ü—Ä–æ–µ–∫—Ç: ${projectTitle}`);
      console.log(`–û–ø–∏—Å–∞–Ω–∏–µ: ${projectDescription}`);
      console.log(`–ê–Ω–∞–ª–∏–∑: ${analysis}`);
      if (analysis !== '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞' && !analysis.toLowerCase().includes('–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å')) {
        const message = `–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç: ${projectTitle}\nURL: ${projectUrl}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${projectDescription}\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞: ${registrationDate}\n–ë—é–¥–∂–µ—Ç: ${budget || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n–ê–Ω–∞–ª–∏–∑: ${analysis}`;
        try {
          await bot.sendMessage(29165285, message);
          console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: ${projectTitle}`);
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: ${error.message}`);
        }
      } else {
        console.log(`–ü—Ä–æ–µ–∫—Ç –ø—Ä–æ–ø—É—â–µ–Ω: ${analysis}`);
      }

      await saveProcessedProject(projectUrl);
      console.log('---');

      await sleep(delay);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ RSS:', error.message);
  }
}

async function main() {
  await processFeed();

  const interval = 15 * 60 * 1000; // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 5 –¥–æ 15 –º–∏–Ω—É—Ç
  setInterval(async () => {
    console.log('–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–æ—Å–∞ RSS...');
    await processFeed();
  }, interval);
}

main();
