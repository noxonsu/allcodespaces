const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const dotenv = require('dotenv');
const fs = require('fs');
const path = require('path');

// Log NAMEPROMPT early to see what .env file will be targeted
const NAMEPROMPT_FROM_ENV = process.env.NAMEPROMPT || 'calories';
console.log(`[Debug] NAMEPROMPT for .env file: ${NAMEPROMPT_FROM_ENV}`);
const envFilePath = path.join(__dirname, `.env.${NAMEPROMPT_FROM_ENV}`);
console.log(`[Debug] Attempting to load .env file from: ${envFilePath}`);

const config = require('./config'); // Import config first
const { NAMEPROMPT, USER_DATA_DIR, CHAT_HISTORIES_DIR, FREE_MESSAGE_LIMIT } = config;

// Log FREE_MESSAGE_LIMIT from config right after import
console.log(`[Debug] FREE_MESSAGE_LIMIT from config.js: ${FREE_MESSAGE_LIMIT}`);
console.log(`[Debug] Raw process.env.FREE_MESSAGE_LIMIT before dotenv.config: ${process.env.FREE_MESSAGE_LIMIT}`);

const {
    sanitizeString,
    validateChatId,
    logChat,
    validateImageResponse,
    validateMimeTypeImg,
    validateMimeTypeAudio
} = require('./utilities');
const {
    setSystemMessage,
    setOpenAIKey,
    setDeepSeekKey,
    setModel,
    callLLM,
    transcribeAudio,
    loadUserData, // Ensure loadUserData provides lastMessageTimestamp, defaulting to null
    saveUserData,
    getUserMessageCount
} = require('./openai');

// Safe import of cost tracker with fallback
let costTracker = null;
try {
    costTracker = require('./costTracker');
    console.log('[Bot] Cost tracking commands enabled');
} catch (error) {
    console.warn('[Bot] Cost tracking commands disabled - costTracker module not found');
}

// --- Configuration ---
const result = dotenv.config({ path: envFilePath }); // Use the already determined envFilePath
if (result.error) {
    console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ .env.${NAMEPROMPT}:`, result.error);
    // process.exit(1); // Commenting out exit on error for debugging purposes
} else {
    console.log(`[Debug] Successfully loaded .env file: ${envFilePath}`);
    // Re-check FREE_MESSAGE_LIMIT from process.env AFTER dotenv.config has run
    console.log(`[Debug] Raw process.env.FREE_MESSAGE_LIMIT after dotenv.config: ${process.env.FREE_MESSAGE_LIMIT}`);
    // If config needs to be re-evaluated based on new .env values, you might need to reload or re-calculate it.
    // However, config.js already reads from process.env, so its values should be correct if dotenv worked.
    // Forcing a re-read from the config module to be sure:
    delete require.cache[require.resolve('./config')]; // Clear cache for config module
    const reloadedConfig = require('./config');
    console.log(`[Debug] FREE_MESSAGE_LIMIT from reloaded config.js after dotenv: ${reloadedConfig.FREE_MESSAGE_LIMIT}`);
    // Update the destructured FREE_MESSAGE_LIMIT if it changed
    if (FREE_MESSAGE_LIMIT !== reloadedConfig.FREE_MESSAGE_LIMIT) {
        console.log(`[Debug] FREE_MESSAGE_LIMIT updated after dotenv load from ${FREE_MESSAGE_LIMIT} to ${reloadedConfig.FREE_MESSAGE_LIMIT}`);
        // It's tricky to re-assign to a const, so it's better if config.js is structured to always provide the latest
        // For this debug, we'll just log. In a real scenario, ensure config always reflects current env.
    }
}

// Ensure directories exist
fs.mkdirSync(USER_DATA_DIR, { recursive: true });
fs.mkdirSync(CHAT_HISTORIES_DIR, { recursive: true });

// --- Initialize Bot ---
const token = process.env.TELEGRAM_BOT_TOKEN;
if (!token) {
    console.error(`–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ —Ñ–∞–π–ª–µ .env.${NAMEPROMPT}`);
    process.exit(1);
}

const openaiApiKey = process.env.OPENAI_API_KEY;
const deepseekApiKey = process.env.DEEPSEEK_API_KEY;
const ACTIVATION_CODE = process.env.ACTIVATION_CODE; // e.g., "KEY-SOMEKEY123"
const PAYMENT_URL_TEMPLATE = process.env.PAYMENT_URL_TEMPLATE || 'https://noxon.wpmix.net/counter.php?tome=1&msg={NAMEPROMPT}_{chatid}&cal=1';

if (!openaiApiKey && !deepseekApiKey) {
    console.error(`–û—à–∏–±–∫–∞: –ù–∏ OPENAI_API_KEY, –Ω–∏ DEEPSEEK_API_KEY –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ .env.${NAMEPROMPT}`);
    process.exit(1);
}

const bot = new TelegramBot(token, { polling: true });

let BOT_USERNAME;
bot.getMe().then(me => {
    BOT_USERNAME = me.username;
    console.log(`[Debug] Bot username: ${BOT_USERNAME}`);
});

// --- Load System Prompt ---
let systemPromptContent = 'You are a helpful assistant.';
try {
    const promptPath = path.join(__dirname, `.env.${NAMEPROMPT}_prompt`);
    if (fs.existsSync(promptPath)) {
        systemPromptContent = fs.readFileSync(promptPath, 'utf8').trim();
        console.log(`–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ ${promptPath}`);
    } else {
        systemPromptContent = process.env.SYSTEM_PROMPT || systemPromptContent;
        console.log(`–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.`);
    }

    if (!systemPromptContent) {
        throw new Error('–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏.');
    }
} catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞:', error);
    process.exit(1);
}

// --- Initialize OpenAI/DeepSeek Module ---
setSystemMessage(systemPromptContent);
if (openaiApiKey) setOpenAIKey(openaiApiKey);
if (deepseekApiKey) setDeepSeekKey(deepseekApiKey);
if (process.env.MODEL) setModel(process.env.MODEL);

// --- Helper Functions ---

async function handleNewDayLogicAndUpdateTimestamp(chatId) {
    const userData = loadUserData(chatId); // Load fresh data each time
    const now = new Date();
    const lastMsgDateObj = userData.lastMessageTimestamp ? new Date(userData.lastMessageTimestamp) : null;
    let isNewDay = false;
    let newDayPrefixForLLM = "";

    if (!lastMsgDateObj) {
        // First message ever, or first since timestamp tracking began. Consider it a "new day" for context.
        isNewDay = true;
    } else {
        // Compare dates in UTC
        const lastDayUTC = new Date(lastMsgDateObj.getUTCFullYear(), lastMsgDateObj.getUTCMonth(), lastMsgDateObj.getUTCDate());
        const currentDayUTC = new Date(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate());

        if (currentDayUTC.getTime() > lastDayUTC.getTime()) {
            isNewDay = true;
        }
    }

    // Update timestamp for this current interaction, regardless of new day status
    userData.lastMessageTimestamp = now.getTime();
    saveUserData(chatId, userData);

    if (isNewDay) {
        try {
            //await bot.sendMessage(chatId, "–ù–∞—Å—Ç–∞–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å.");
            logChat(chatId, { type: 'system_message', event: 'new_day_notification_sent', timestamp: now.toISOString() }, 'system');
        } catch (error) {
            console.error(`[New Day Logic ${chatId}] Error sending new day message:`, error);
        }
        newDayPrefixForLLM = "–ù–∞—Å—Ç–∞–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å. "; // This prefix will be added to the LLM prompt
    }
    return newDayPrefixForLLM;
}

async function checkPaymentStatusAndPrompt(chatId) {
    const userData = loadUserData(chatId);
    if (userData.isPaid) {
        return true;
    }
    
    // Get fresh FREE_MESSAGE_LIMIT from reloaded config
    const reloadedConfig = require('./config');
    if (reloadedConfig.FREE_MESSAGE_LIMIT === null) { // null means unlimited
        return true;
    }

    const userMessageCount = getUserMessageCount(chatId);

    if (userMessageCount >= reloadedConfig.FREE_MESSAGE_LIMIT) {
        const paymentUrl = PAYMENT_URL_TEMPLATE
            .replace('{NAMEPROMPT}', NAMEPROMPT)
            .replace('{chatid}', chatId.toString());

        const messageText = escapeMarkdown(`–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π (${reloadedConfig.FREE_MESSAGE_LIMIT}). –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø. –ü–æ–¥—Å—á–µ—Ç –ö–ë–ñ–£ —ç—Ç–æ 100% —Å–ø–æ—Å–æ–± —Å—Ç–∞—Ç—å –∑–¥–æ—Ä–æ–≤–µ–µ –∏ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ—é –∏–ª–∏ –∂–∏–∑–Ω—å —Ä–µ–±–µ–Ω–∫–∞. –ü—Ä–æ–¥–æ–ª–∂–∏–º? üëç`);
        
        try {
            await bot.sendMessage(chatId, messageText, {
                parse_mode: 'MarkdownV2',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: "–û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", url: paymentUrl }]
                    ]
                }
            });
            logChat(chatId, {
                event: 'payment_prompted',
                limit: reloadedConfig.FREE_MESSAGE_LIMIT,
                current_count: userMessageCount,
                url: paymentUrl
            }, 'system');
        } catch (error) {
            console.error(`Error sending payment prompt to ${chatId}:`, error);
        }
        return false; // User needs to pay
    }
    return true; // User can proceed
}

function escapeMarkdown(text) {
    // Escape all MarkdownV2 reserved characters: _ * [ ] ( ) ~ ` > # + - = | { } . !
    return text.replace(/[_[\]()~`>#+\-=|{}.!]/g, '\\$&');
}

function formatReferralLink(botUsername, referralCode) {
    // Ensure the equals sign is included after "start"
    return `https://t.me/${botUsername}/?start=${referralCode}`;
}

async function sendAndLogResponse(chatId, assistantText) {
    try {
        await bot.sendChatAction(chatId, 'typing');
        
        let escapedText = escapeMarkdown(assistantText);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        await bot.sendMessage(chatId, escapedText, { parse_mode: 'MarkdownV2' });
        
        console.info(`[Bot ${chatId}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π ${assistantText.length}`);
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ ${chatId}:`, error.message);
        try {
            // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
            await bot.sendMessage(chatId, assistantText);
        } catch (fallbackError) {
            console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`, fallbackError.message);
        }
    }
}

async function sendErrorMessage(chatId, specificErrorMsg, context = '–æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞') {
    console.error(`–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è ${context} –¥–ª—è —á–∞—Ç–∞ ${chatId}:`, specificErrorMsg);
    try {
        await bot.sendMessage(
            chatId,
            `–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –≤–æ –≤—Ä–µ–º—è ${context}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.`
        );
        logChat(chatId, {
            error: `error_in_${context.replace(/\s+/g, '_')}`,
            message: specificErrorMsg,
            timestamp: new Date().toISOString()
        }, 'error');
    } catch (sendError) {
        console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —á–∞—Ç ${chatId}:`, sendError.message);
    }
}

// --- Message Processors ---

async function processVoice(msg) {
    const chatId = msg.chat.id;
    if (!validateChatId(chatId)) throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π chat ID –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏');

    const caption = msg.caption ? sanitizeString(msg.caption) : '';
    const voice = msg.voice;
    if (!voice || !voice.file_id) throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');

    console.info(`[–ì–æ–ª–æ—Å ${chatId}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.`);
    const file = await bot.getFile(voice.file_id);
    if (!file || !file.file_path) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–æ –æ—Ç Telegram');

    const fileUrl = `https://api.telegram.org/file/bot${token}/${file.file_path}`;
    const mimeType = voice.mime_type;

    if (!mimeType || !validateMimeTypeAudio(mimeType)) {
        console.warn(`[–ì–æ–ª–æ—Å ${chatId}] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π MIME —Ç–∏–ø –∞—É–¥–∏–æ: ${mimeType}`);
        throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ: ${mimeType || 'Unknown'}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ MP3, OGG, WAV, M4A.`);
    }

    console.info(`[–ì–æ–ª–æ—Å ${chatId}] –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ —Å ${fileUrl} (MIME: ${mimeType})`);
    const transcribedText = await transcribeAudio(fileUrl, 'ru');

    const userMessageContent = [];
    if (caption) userMessageContent.push({ type: 'input_text', text: caption });
    userMessageContent.push({ type: 'input_text', text: transcribedText });

    logChat(chatId, {
        type: 'voice_received',
        mimeType: mimeType,
        duration: voice.duration,
        fileSize: voice.file_size,
        hasCaption: Boolean(caption),
        transcribedTextLength: transcribedText.length,
        timestamp: new Date(msg.date * 1000).toISOString()
    }, 'event');

    return userMessageContent;
}

async function processPhoto(msg) {
    const chatId = msg.chat.id;
    if (!validateChatId(chatId)) throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π chat ID –≤ —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–∏');

    console.info(`[–§–æ—Ç–æ ${chatId}] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è.`);
    
    const caption = msg.caption ? sanitizeString(msg.caption) : '';
    console.debug(`[–§–æ—Ç–æ ${chatId}] Caption –ø–æ—Å–ª–µ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏: "${caption}"`);
    
    const photo = msg.photo && msg.photo.length > 0 ? msg.photo[msg.photo.length - 1] : null;
    if (!photo || !photo.file_id) {
        console.error(`[–§–æ—Ç–æ ${chatId}] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ:`, JSON.stringify(msg.photo));
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏');
    }
    console.debug(`[–§–æ—Ç–æ ${chatId}] –†–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ: ${photo.width}x${photo.height}, file_id: ${photo.file_id}`);

    console.info(`[–§–æ—Ç–æ ${chatId}] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ –æ—Ç Telegram API`);
    const file = await bot.getFile(photo.file_id);
    if (!file || !file.file_path) {
        console.error(`[–§–æ—Ç–æ ${chatId}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª:`, JSON.stringify(file));
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –æ—Ç Telegram');
    }
    console.debug(`[–§–æ—Ç–æ ${chatId}] –ü–æ–ª—É—á–µ–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: ${file.file_path}`);

    const fileUrl = `https://api.telegram.org/file/bot${token}/${file.file_path}`;
    const fileExtension = path.extname(file.file_path).toLowerCase();
    console.debug(`[–§–æ—Ç–æ ${chatId}] –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ${fileExtension}`);
    
    const mimeType = {
        '.jpg': 'image/jpeg', '.jpeg': 'image/jpeg', '.png': 'image/png',
        '.gif': 'image/gif', '.webp': 'image/webp', '.bmp': 'image/bmp'
    }[fileExtension];

    if (!mimeType || !validateMimeTypeImg(mimeType)) {
        console.warn(`[–§–æ—Ç–æ ${chatId}] –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${fileExtension}`);
        throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (${fileExtension || 'Unknown'}). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ JPEG, PNG, GIF, WEBP, BMP.`);
    }
    console.debug(`[–§–æ—Ç–æ ${chatId}] MIME —Ç–∏–ø: ${mimeType}`);

    console.info(`[–§–æ—Ç–æ ${chatId}] –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å ${fileUrl}`);
    try {
        const imageResponse = await axios.get(fileUrl, {
            responseType: 'arraybuffer',
            timeout: 30000,
            maxContentLength: 15 * 1024 * 1024
        });
        
        console.debug(`[–§–æ—Ç–æ ${chatId}] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, —Ä–∞–∑–º–µ—Ä: ${imageResponse.data.length} –±–∞–π—Ç`);
        validateImageResponse(imageResponse, 10 * 1024 * 1024);
        
        const imageBase64 = Buffer.from(imageResponse.data).toString('base64');
        // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ base64, —Ç–æ–ª—å–∫–æ –µ–≥–æ –¥–ª–∏–Ω—É
        console.debug(`[–§–æ—Ç–æ ${chatId}] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ base64, –¥–ª–∏–Ω–∞: ${imageBase64.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        
        const imageUrl = `data:${mimeType};base64,${imageBase64}`;
        if (imageUrl.length > 20 * 1024 * 1024 * 0.75) {
            console.error(`[–§–æ—Ç–æ ${chatId}] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –ø–æ—Å–ª–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: ${imageUrl.length} –±–∞–π—Ç`);
            throw new Error('–ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–∏.');
        }

        const userMessageContent = [];
        if (caption) userMessageContent.push({ type: 'input_text', text: caption });
        userMessageContent.push({ type: 'input_image', image_url: imageUrl });
        
        console.info(`[–§–æ—Ç–æ ${chatId}] –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ${userMessageContent.length} —á–∞—Å—Ç—è–º–∏ (—Ç–µ–∫—Å—Ç: ${caption ? '–¥–∞' : '–Ω–µ—Ç'}, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –¥–∞)`);
        // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è base64
        console.debug(`[–§–æ—Ç–æ ${chatId}] –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:`, JSON.stringify(userMessageContent.map(c => ({ 
            type: c.type, 
            hasContent: c.type === 'input_image' ? 'yes (data:image/... base64 data)' : (c.text ? 'yes' : 'no') 
        }))));

        logChat(chatId, {
            type: 'photo_received',
            mimeType: mimeType,
            fileSize: photo.file_size,
            width: photo.width,
            height: photo.height,
            hasCaption: Boolean(caption),
            timestamp: new Date(msg.date * 1000).toISOString()
        }, 'event');

        return userMessageContent;
    } catch (error) {
        console.error(`[–§–æ—Ç–æ ${chatId}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ/–æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:`, error.message);
        throw error;
    }
}

// --- Telegram Bot Event Handlers ---

bot.onText(/\/start(?:\s+(.+))?/, async (msg, match) => {
    const chatId = msg.chat.id;
    if (!validateChatId(chatId)) {
        console.error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π chat ID –≤ /start: ${msg.chat.id}`);
        return;
    }
    console.info(`[Start ${chatId}] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start.`);

    try {
        const userFilePath = path.join(USER_DATA_DIR, `${chatId}.json`);
        let startParam = match?.[1] ? sanitizeString(match[1]) : null;
        const howPassed = startParam ? `—á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä: ${startParam}` : '–ø—Ä—è–º–∞—è –∫–æ–º–∞–Ω–¥–∞ /start';

        let userData = {};
        let isNewUser = false;
        if (fs.existsSync(userFilePath)) {
            try {
                const existingData = JSON.parse(fs.readFileSync(userFilePath, 'utf8'));
                userData = { ...loadUserData(chatId), ...existingData }; // Ensure defaults like isPaid are loaded
                if (startParam && startParam !== userData.startParameter) {
                    userData.lastStartParam = startParam;
                    console.info(`[Start ${chatId}] –ß–∞—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —Å –Ω–æ–≤—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º: ${startParam}`);
                }
                userData.lastRestartTime = new Date().toISOString();
            } catch (parseError) {
                console.error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è ${chatId}, —Å–±—Ä–æ—Å:`, parseError);
                isNewUser = true;
            }
        } else {
            isNewUser = true;
        }

        if (isNewUser) {
            userData = {
                chatId: chatId.toString(),
                firstVisit: new Date().toISOString(),
                startParameter: startParam,
                howPassed: howPassed,
                username: msg.from?.username || null,
                firstName: msg.from?.first_name || null,
                lastName: msg.from?.last_name || null,
                languageCode: msg.from?.language_code || null,
                longMemory: '',
                lastLongMemoryUpdate: 0,
                isPaid: userData.isPaid || false, 
                providedName: userData.providedName || null, 
                lastRestartTime: new Date().toISOString(),
                lastMessageTimestamp: null // Initialize lastMessageTimestamp
            };
            console.info(`[Start ${chatId}] –ó–∞–ø–∏—Å–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`);
        } else {
            // Ensure existing users have this field, defaulting if not.
            // loadUserData should ideally handle this default.
            if (userData.lastMessageTimestamp === undefined) {
                userData.lastMessageTimestamp = null;
            }
        }

        fs.writeFileSync(userFilePath, JSON.stringify(userData, null, 2));
        console.info(`[Start ${chatId}] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.`);

        const chatLogPath = path.join(CHAT_HISTORIES_DIR, `chat_${chatId}.log`);
        if (fs.existsSync(chatLogPath)) {
            try {
                fs.unlinkSync(chatLogPath);
                console.info(`[Start ${chatId}] –õ–æ–≥ —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω –∏–∑-–∑–∞ –∫–æ–º–∞–Ω–¥—ã /start.`);
            } catch (unlinkError) {
                console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–≥–∞ —á–∞—Ç–∞ –¥–ª—è ${chatId}:`, unlinkError);
            }
        }

        logChat(chatId, {
            type: 'system_event',
            event: 'start_command',
            howPassed: howPassed,
            isNewUser: isNewUser,
            timestamp: new Date(msg.date * 1000).toISOString()
        }, 'system');

        if (isNewUser) {
            await bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?');
            logChat(chatId, { type: 'system_message', text: '–ó–∞–ø—Ä–æ—à–µ–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' }, 'system');
        } else {
            await bot.sendMessage(chatId, '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?');
            logChat(chatId, { type: 'system_message', text: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º"' }, 'system');
        }
    } catch (error) {
        console.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start –¥–ª—è —á–∞—Ç–∞ ${chatId}:`, error);
        await sendErrorMessage(chatId, error.message, '–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start');
    }
});

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    if ((msg.chat.type === 'group' || msg.chat.type === 'supergroup') && !msg.text?.includes(`@${BOT_USERNAME}`)) {
        console.info(`[Ignored] Message in group ${chatId} without mention of @${BOT_USERNAME}`);
        return;
    }
    if (!validateChatId(chatId)) {
        console.error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π chat ID –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: ${msg.chat.id}`);
        return;
    }
    if (msg.photo || msg.voice || (msg.text && msg.text.startsWith('/start'))) {
        return;
    }
    if (!msg.text) {
        console.info(`[–°–æ–æ–±—â–µ–Ω–∏–µ ${chatId}] –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–∏–ø: ${msg.document ? 'document' : msg.sticker ? 'sticker' : 'other'})`);
        return;
    }

    const userText = sanitizeString(msg.text);
    if (!userText) {
        console.info(`[–°–æ–æ–±—â–µ–Ω–∏–µ ${chatId}] –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏.`);
        return;
    }

    try {
        const newDayPrefix = await handleNewDayLogicAndUpdateTimestamp(chatId);
        console.info(`[–°–æ–æ–±—â–µ–Ω–∏–µ ${chatId}] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –î–ª–∏–Ω–∞: ${userText.length}. NewDayPrefix: "${newDayPrefix}"`);

        // Handle activation code input
        if (ACTIVATION_CODE && userText.startsWith('KEY-')) {
            if (userText === ACTIVATION_CODE) {
                const userData = loadUserData(chatId); // Reload data as it might have been updated by handleNewDayLogic
                userData.isPaid = true;
                saveUserData(chatId, userData);
                await bot.sendMessage(chatId, escapeMarkdown("Activation successful! You can now use the bot without limits."), { parse_mode: 'MarkdownV2' });
                logChat(chatId, { event: 'activation_success', code_entered: userText }, 'system');
            } else {
                await bot.sendMessage(chatId, escapeMarkdown("Invalid activation code."), { parse_mode: 'MarkdownV2' });
                logChat(chatId, { event: 'activation_failed', code_entered: userText }, 'system');
            }
            return; // Stop further processing for this message
        }

        const canProceed = await checkPaymentStatusAndPrompt(chatId);
        if (!canProceed) {
            return;
        }

        await bot.sendChatAction(chatId, 'typing');

        const userDataPath = path.join(USER_DATA_DIR, `${chatId}.json`);
        if (!fs.existsSync(userDataPath)) {
            console.info(`[–°–æ–æ–±—â–µ–Ω–∏–µ ${chatId}] –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º /start.`);
            await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.');
            logChat(chatId, { type: 'system_event', event: 'prompted_start_no_userdata' }, 'system');
            return;
        }

        let hasProvidedName = false;
        try {
            const userData = JSON.parse(fs.readFileSync(userDataPath, 'utf8'));
            if (userData.providedName) hasProvidedName = true;
        } catch (err) {
            console.error(`[–°–æ–æ–±—â–µ–Ω–∏–µ ${chatId}] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–µ–Ω–∏:`, err);
        }

        if (!hasProvidedName) {
            console.info(`[–°–æ–æ–±—â–µ–Ω–∏–µ ${chatId}] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –∏–º–µ–Ω–∏: "${userText}"`);
            logChat(chatId, {
                type: 'name_provided',
                role: 'user',
                name: userText,
                content: [{ type: 'input_text', text: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –∏–º—è: ${userText}` }],
                timestamp: new Date(msg.date * 1000).toISOString()
            }, 'user');

            try {
                const userData = JSON.parse(fs.readFileSync(userDataPath, 'utf8'));
                userData.providedName = userText;
                userData.nameLastUpdate = new Date().toISOString();
                fs.writeFileSync(userDataPath, JSON.stringify(userData, null, 2));
                console.info(`[–°–æ–æ–±—â–µ–Ω–∏–µ ${chatId}] –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`);
            } catch (err) {
                console.error(`[–°–æ–æ–±—â–µ–Ω–∏–µ ${chatId}] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º:`, err);
            }

            const llmInputTextForName = newDayPrefix + `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–∫–∞–∑–∞–ª –º–Ω–µ, —á—Ç–æ –µ–≥–æ –∑–æ–≤—É—Ç "${userText}". –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ —ç—Ç–æ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ.`;
            const assistantResponse = await callLLM(chatId, [{
                type: 'input_text',
                text: llmInputTextForName
            }]);
            await sendAndLogResponse(chatId, assistantResponse);
            return;
        }

        const llmInputTextRegular = newDayPrefix + userText;
        const userMessageContent = [{ type: 'input_text', text: llmInputTextRegular }];
        const assistantText = await callLLM(chatId, userMessageContent);
        await sendAndLogResponse(chatId, assistantText);
    } catch (error) {
        await sendErrorMessage(chatId, error.message, '–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
});

bot.on('photo', async (msg) => {
    const chatId = msg.chat.id;
    if (!validateChatId(chatId)) {
        console.error(`[–§–æ—Ç–æ] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π chat ID: ${chatId}`);
        return;
    }

    const userDataPath = path.join(USER_DATA_DIR, `${chatId}.json`);
    if (!fs.existsSync(userDataPath)) {
        console.info(`[–§–æ—Ç–æ ${chatId}] –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º /start.`);
        await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ç–æ.');
        logChat(chatId, { type: 'system_event', event: 'prompted_start_no_userdata_photo' }, 'system');
        return;
    }

    try {
        const newDayPrefix = await handleNewDayLogicAndUpdateTimestamp(chatId);
        console.info(`[–§–æ—Ç–æ ${chatId}] NewDayPrefix: "${newDayPrefix}"`);

        const canProceed = await checkPaymentStatusAndPrompt(chatId);
        if (!canProceed) {
            return;
        }

        console.info(`[–§–æ—Ç–æ ${chatId}] –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`);
        await bot.sendChatAction(chatId, 'upload_photo');
        
        // –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º OpenAI –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ
        const currentModel = process.env.OPENAIMODEL;
        console.info(`[–§–æ—Ç–æ ${chatId}] –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: ${currentModel}, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ OpenAI –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –º–æ–¥–µ–ª—å openai –∏–∑ env OPENAIMODEL 
        setModel(process.env.OPENAIMODEL || 'gpt-4.1-mini');
        
        console.info(`[–§–æ—Ç–æ ${chatId}] –í—ã–∑—ã–≤–∞–µ–º processPhoto`);
        const userMessageContent = await processPhoto(msg);
        
        console.info(`[–§–æ—Ç–æ ${chatId}] –†–µ–∑—É–ª—å—Ç–∞—Ç processPhoto: ${userMessageContent ? userMessageContent.length + ' —ç–ª–µ–º–µ–Ω—Ç–æ–≤' : 'null'}`);
        if (!userMessageContent || userMessageContent.length === 0) {
            console.error(`[–§–æ—Ç–æ ${chatId}] –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ`);
            throw new Error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç");
        }

        if (newDayPrefix) {
            let textPartFound = false;
            for (const part of userMessageContent) {
                if (part.type === 'input_text') {
                    part.text = newDayPrefix + (part.text || "");
                    textPartFound = true;
                    break;
                }
            }
            if (!textPartFound) {
                userMessageContent.unshift({ type: 'input_text', text: newDayPrefix.trim() });
            }
        }
        
        console.info(`[–§–æ—Ç–æ ${chatId}] –í—ã–∑—ã–≤–∞–µ–º OpenAI —Å –º–æ–¥–µ–ª—å—é gpt-4-vision-preview`);
        const assistantText = await callLLM(chatId, userMessageContent);
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –º–æ–¥–µ–ª—å –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (currentModel) {
            console.info(`[–§–æ—Ç–æ ${chatId}] –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –º–æ–¥–µ–ª—å: ${currentModel}`);
            setModel(currentModel);
        }
        
        console.info(`[–§–æ—Ç–æ ${chatId}] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç LLM –¥–ª–∏–Ω–æ–π ${assistantText ? assistantText.length : 0}`);
        await sendAndLogResponse(chatId, assistantText);
    } catch (error) {
        await sendErrorMessage(chatId, error.message, '–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ');
    }
});

bot.on('voice', async (msg) => {
    const chatId = msg.chat.id;
    if (!validateChatId(chatId)) return;

    try {
        const newDayPrefix = await handleNewDayLogicAndUpdateTimestamp(chatId);
        console.info(`[–ì–æ–ª–æ—Å ${chatId}] NewDayPrefix: "${newDayPrefix}"`);

        const canProceed = await checkPaymentStatusAndPrompt(chatId);
        if (!canProceed) {
            return;
        }

        const userDataPath = path.join(USER_DATA_DIR, `${chatId}.json`);
        if (!fs.existsSync(userDataPath)) {
            console.info(`[–ì–æ–ª–æ—Å ${chatId}] –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º /start.`);
            await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.');
            logChat(chatId, { type: 'system_event', event: 'prompted_start_no_userdata_voice' }, 'system');
            return;
        }

        console.info(`[–ì–æ–ª–æ—Å ${chatId}] –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.`);
        await bot.sendChatAction(chatId, 'typing');
        const userMessageContent = await processVoice(msg);

        if (newDayPrefix) {
            if (userMessageContent.length > 0 && userMessageContent[0].type === 'input_text') {
                userMessageContent[0].text = newDayPrefix + (userMessageContent[0].text || "");
            } else { // Fallback if processVoice structure changes or is empty
                userMessageContent.unshift({ type: 'input_text', text: newDayPrefix.trim() });
            }
        }

        const assistantText = await callLLM(chatId, userMessageContent);
        await sendAndLogResponse(chatId, assistantText);
    } catch (error) {
        await sendErrorMessage(chatId, error.message, '–æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
});

// --- Error Handlers ---
bot.on('polling_error', (error) => {
    console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–æ—Å–∞ (Polling):', error.code, '-', error.message);
});

bot.on('webhook_error', (error) => {
    console.error('–û—à–∏–±–∫–∞ Webhook:', error.code, '-', error.message);
});

// --- Bot Start ---
console.log('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞...');

process.on('SIGINT', () => {
    console.log('–ü–æ–ª—É—á–µ–Ω SIGINT. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...');
    bot.stopPolling().then(() => {
        console.log('–û–ø—Ä–æ—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
        process.exit(0);
    });
});

process.on('SIGTERM', () => {
    console.log('–ü–æ–ª—É—á–µ–Ω SIGTERM. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...');
    bot.stopPolling().then(() => {
        console.log('–û–ø—Ä–æ—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
        process.exit(0);
    });
});

// Add cost tracking command (only if cost tracker is available)
if (costTracker) {
    bot.onText(/\/cost/, async (msg) => {
        const chatId = msg.chat.id;
        if (!validateChatId(chatId)) {
            console.error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π chat ID –≤ /cost: ${msg.chat.id}`);
            return;
        }

        try {
            const chatCosts = costTracker.getChatCosts(chatId);
            const dailyCosts = costTracker.getDailyCosts();
            const botSummary = costTracker.getBotCostsSummary();
            
            let message = `üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤:\n\n`;
            message += `–í–∞—à —á–∞—Ç: $${chatCosts.totalCost.toFixed(4)} (${chatCosts.requests} –∑–∞–ø—Ä–æ—Å–æ–≤)\n`;
            message += `–°–µ–≥–æ–¥–Ω—è –≤—Å–µ–≥–æ: $${dailyCosts.totalCost.toFixed(4)} (${dailyCosts.requests} –∑–∞–ø—Ä–æ—Å–æ–≤)\n\n`;
            
            if (Object.keys(botSummary).length > 0) {
                message += `üìä –ü–æ –±–æ—Ç–∞–º:\n`;
                for (const [bot, stats] of Object.entries(botSummary)) {
                    message += `${bot}: $${stats.totalCost.toFixed(4)} (${stats.requests} –∑–∞–ø—Ä–æ—Å–æ–≤, ${stats.uniqueChats} —á–∞—Ç–æ–≤)\n`;
                }
            } else {
                message += `üìä –î–∞–Ω–Ω—ã–µ –ø–æ –±–æ—Ç–∞–º –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n`;
            }
            
            await bot.sendMessage(chatId, escapeMarkdown(message), { parse_mode: 'MarkdownV2' });
            
            logChat(chatId, {
                type: 'system_event',
                event: 'cost_command',
                timestamp: new Date(msg.date * 1000).toISOString()
            }, 'system');
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /cost –¥–ª—è —á–∞—Ç–∞ ${chatId}:`, error);
            await sendErrorMessage(chatId, error.message, '–ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤');
        }
    });
} else {
    // Fallback /cost command when cost tracker is not available
    bot.onText(/\/cost/, async (msg) => {
        const chatId = msg.chat.id;
        if (!validateChatId(chatId)) {
            console.error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π chat ID –≤ /cost: ${msg.chat.id}`);
            return;
        }

        try {
            const message = `üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤ —ç—Ç–æ–º –±–æ—Ç–µ.`;
            await bot.sendMessage(chatId, escapeMarkdown(message), { parse_mode: 'MarkdownV2' });
            
            logChat(chatId, {
                type: 'system_event',
                event: 'cost_command_unavailable',
                timestamp: new Date(msg.date * 1000).toISOString()
            }, 'system');
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /cost –¥–ª—è —á–∞—Ç–∞ ${chatId}:`, error);
        }
    });
}
