const fs = require("fs").promises;
const path = require("path");
const OpenAI = require("openai");
const dotenv = require("dotenv");
const TelegramBot = require("node-telegram-bot-api");

const result = dotenv.config();
if (result.error) {
  console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ .env`, result.error);
  process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI —Å –≤–∞—à–∏–º API-–∫–ª—é—á–æ–º
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot
const token = process.env.TELEGRAM_BOT_TOKEN;
if (!token) {
  console.error("Telegram Bot Token –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN.");
  process.exit(1);
}
const bot = new TelegramBot(token);
const CHAT_ID = "-4906251579"; // –£–∫–∞–∑–∞–Ω–Ω—ã–π ID —á–∞—Ç–∞

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const CHARS_PER_MINUTE = 900; // –°–∫–æ—Ä–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è
const MAX_MINUTES = 5; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
const MAX_CHARS = CHARS_PER_MINUTE * MAX_MINUTES; // 27,000 —Å–∏–º–≤–æ–ª–æ–≤
const inputFile = path.resolve("./saturn.txt");
const outputDir = path.resolve("./output_audio");
const textChunksDir = path.resolve("./text_chunks");
const summariesDir = path.resolve("./summaries");

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
async function ensureDirs() {
  try {
    await fs.mkdir(outputDir, { recursive: true });
    await fs.mkdir(textChunksDir, { recursive: true });
    await fs.mkdir(summariesDir, { recursive: true });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:", error.message);
    process.exit(1);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏
function splitText(text) {
  const chunks = [];
  let currentChunk = "";
  let currentLength = 0;

  // –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∞–±–∑–∞—Ü—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
  const paragraphs = text.split(/\n|\. /);

  for (let i = 0; i < paragraphs.length; i++) {
    const para = paragraphs[i].trim();
    if (!para) continue;

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –æ–±—Ä–∞—Ç–Ω–æ, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    const segment = para.endsWith(".") ? para : `${para}. `;
    const segmentLength = segment.length;

    if (currentLength + segmentLength > MAX_CHARS) {
      if (currentChunk) {
        chunks.push(currentChunk.trim());
        currentChunk = "";
        currentLength = 0;
      }
    }

    currentChunk += segment;
    currentLength += segmentLength;

    // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ chunks
    if (i === paragraphs.length - 1 && currentChunk) {
      chunks.push(currentChunk.trim());
    }
  }

  return chunks;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
async function saveTextChunks(chunks, originalFileName) {
  try {
    for (let i = 0; i < chunks.length; i++) {
      const chunkFile = path.resolve(textChunksDir, `${originalFileName}_chunk_${i + 1}.txt`);
      await fs.writeFile(chunkFile, chunks[i]);
      console.log(`–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${chunkFile}`);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤:", error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
async function loadTextChunks(originalFileName) {
  try {
    const files = await fs.readdir(textChunksDir);
    const chunkFiles = files
      .filter((file) => file.startsWith(`${originalFileName}_chunk_`) && file.endsWith(".txt"))
      .sort((a, b) => {
        const aNum = parseInt(a.match(/\d+/)[0]);
        const bNum = parseInt(b.match(/\d+/)[0]);
        return aNum - bNum;
      });

    const chunks = [];
    for (const file of chunkFiles) {
      const content = await fs.readFile(path.resolve(textChunksDir, file), "utf8");
      chunks.push(content);
    }
    return chunks;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤:", error.message);
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
async function createAudioChunk(text, index) {
  const originalFileName = path.basename(inputFile, path.extname(inputFile));
  const speechFile = path.resolve(outputDir, `${originalFileName}_part_${index + 1}.mp3`);
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª
    try {
      await fs.access(speechFile);
      console.log(`–ê—É–¥–∏–æ—Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: ${speechFile}`);
      return false; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º false, –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    } catch {
      // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    }

    const mp3 = await openai.audio.speech.create({
      model: "gpt-4o-mini-tts",
      voice: "coral",
      input: text,
      instructions: "–≠—Ç–æ —É—á–µ–±–Ω–∏–∫ –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏.",
    });

    const buffer = Buffer.from(await mp3.arrayBuffer());
    await fs.writeFile(speechFile, buffer);
    console.log(`–ê—É–¥–∏–æ—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${speechFile}`);
    return true; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, –µ—Å–ª–∏ —Ñ–∞–π–ª –±—ã–ª —Å–æ–∑–¥–∞–Ω
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ ${speechFile}:`, error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
async function createSummary(text, index) {
  const originalFileName = path.basename(inputFile, path.extname(inputFile));
  const summaryFile = path.resolve(summariesDir, `${originalFileName}_summary_${index + 1}.txt`);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    try {
      const existingSummary = await fs.readFile(summaryFile, "utf8");
      console.log(`–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è —á–∞—Å—Ç–∏ ${index + 1}`);
      return existingSummary.trim();
    } catch {
      // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    }

    console.log(`–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —á–∞—Å—Ç–∏ ${index + 1}...`);
    
    const response = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –æ–¥–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏. –û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—É—é —Å—É—Ç—å —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Å—Ç—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º."
        },
        {
          role: "user",
          content: `–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –æ–¥–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ (—Å—Ä–∞–∑—É —Å—É—Ç—å –Ω–µ –Ω–∞—á–∏–Ω–∞–π —Å–æ —Å–ª–æ–≤ "–¢–µ–∫—Å—Ç –æ–ø–∏—Å—ã–≤–∞–µ—Ç" –∏ —Ç.–ø.):\n\n${text.substring(0, 2000)}...`
        }
      ],
      max_tokens: 100,
      temperature: 0.3
    });

    const summary = response.choices[0].message.content.trim();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
    await fs.writeFile(summaryFile, summary);
    console.log(`–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${summaryFile}`);
    
    return summary;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —á–∞—Å—Ç–∏ ${index + 1}:`, error.message);
    return `–ê—É–¥–∏–æ-—Ñ—Ä–∞–≥–º–µ–Ω—Ç ${index + 1}`;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
async function loadSummary(originalFileName, index) {
  try {
    const summaryFile = path.resolve(summariesDir, `${originalFileName}_summary_${index + 1}.txt`);
    const summary = await fs.readFile(summaryFile, "utf8");
    return summary.trim();
  } catch (error) {
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –≤ Telegram
async function sendAudioToTelegram(filePath, caption, text) {
  try {
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Telegram (–º–∞–∫—Å–∏–º—É–º 1024 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è caption)
    const truncatedText = text.length > 800 ? text.substring(0, 800) + "..." : text;
    const fullCaption = `${caption}\n\nüìù ${truncatedText}`;
    
    await bot.sendAudio(CHAT_ID, filePath, { caption: fullCaption });
    console.log(`–ê—É–¥–∏–æ—Ñ–∞–π–ª "${path.basename(filePath)}" —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.`);
    return true;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ "${path.basename(filePath)}" –≤ Telegram:`, error.message);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function textToSpeech() {
  try {
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    await ensureDirs();

    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∏–º–µ–Ω–∞—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
    const originalFileName = path.basename(inputFile, path.extname(inputFile));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
    let textChunks = await loadTextChunks(originalFileName);
    if (textChunks.length > 0) {
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${textChunks.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤.`);
    } else {
      // –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
      const inputText = await fs.readFile(inputFile, "utf8");
      if (!inputText.trim()) {
        console.error("–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –ø—É—Å—Ç.");
        return;
      }

      // –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏
      textChunks = splitText(inputText);
      console.log(`–¢–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ ${textChunks.length} —á–∞—Å—Ç–µ–π.`);

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
      await saveTextChunks(textChunks, originalFileName);
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
    let successCount = 0;
    let sentCount = 0;
    
    for (let i = 0; i < textChunks.length; i++) {
      console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–∏ ${i + 1} (${textChunks[i].length} —Å–∏–º–≤–æ–ª–æ–≤)...`);
      
      // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –±—ã–ª —Å–æ–∑–¥–∞–Ω –∑–∞–Ω–æ–≤–æ)
      const audioCreated = await createAudioChunk(textChunks[i], i);
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
      const speechFile = path.resolve(outputDir, `${originalFileName}_part_${i + 1}.mp3`);
      try {
        await fs.access(speechFile);
        successCount++; // –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      } catch {
        // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –±—ã–ª —Å–æ–∑–¥–∞–Ω –∑–∞–Ω–æ–≤–æ
      if (audioCreated) {
        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        let summary = await loadSummary(originalFileName, i);
        if (!summary) {
          summary = await createSummary(textChunks[i], i);
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤ Telegram —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
        const sent = await sendAudioToTelegram(
          speechFile, 
          `–ê—É–¥–∏–æ-—Ñ—Ä–∞–≥–º–µ–Ω—Ç ${i + 1} –∏–∑ ${textChunks.length}`,
          summary
        );
        
        if (sent) {
          sentCount++;
        }
      }
    }

    console.log(
      `–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${successCount} –∏–∑ ${textChunks.length} –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã. ${sentCount} –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.`
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:", error.message);
  }
}

// –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
textToSpeech();
